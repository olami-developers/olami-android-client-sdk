apply plugin: 'com.android.library'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "2.6.1"

        archivesBaseName = "olami-android-client"
        version = android.defaultConfig.versionName

        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -frtti -fexceptions"
            }
        }

        ndk {
            abiFilters 'armeabi-v7a','arm64-v8a'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets { main { jni.srcDirs = ['src/main/jni', 'src/main/jni/'] } }

    lintOptions {
        abortOnError false
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${archivesBaseName}-${version}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

configurations {
    doc {
        transitive false
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.google.code.gson:gson:2.8.1'
    doc 'ai.olami:olami-java-client:1.5.0:sources'
}




// Copy output files to '/bin' after build --------------------------
def binRoot = '../bin'
def aarBaseName = "${archivesBaseName}-${version}"
def aarOutFilePath = "build/outputs/aar/${aarBaseName}.aar"
def aarTempPath = "${binRoot}/.lib_aar_temp"
def libsListPath = "${binRoot}/list-of-dependencies"
def javadocTempPath = "${binRoot}/.javadoc"

task copyOutputFiles << {
    delete aarTempPath
    delete libsListPath
    delete javadocTempPath
    // Copy aar file to the lib list folder
    copy {
        from aarOutFilePath
        into libsListPath
    }
    // Unzip aar file to be the source for the new full-packed aar file
    copy {
        from zipTree(new File(aarOutFilePath))
        into aarTempPath
    }
    // Copy dependencies for the new full-packed aar file
    copy {
        from configurations.compile
        into "${aarTempPath}/libs"
    }
    // opy dependencies to the lib list folder
    copy {
        from configurations.compile
        into libsListPath
    }
}

task packFullAAR(type:Zip) {
    dependsOn copyOutputFiles
    // Packing with all dependencies for the new aar file
    from aarTempPath
    include '*'
    include '**/*'
    archiveName "${aarBaseName}-full.aar"
    destinationDir(file(binRoot))
}

task createFullJavaDoc(type:Javadoc) {
    dependsOn packFullAAR
    options.addStringOption('Xdoclint:none', '-quiet')
    title archivesBaseName
    destinationDir(file(javadocTempPath))
    // Build javadoc for the whole ai.olami.* packages, including this project and olami-java-client
    source = android.sourceSets.main.java.srcDirs
    source configurations.doc.collect { zipTree(it) }
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
    include 'ai/olami/**/*.java'
}

task packFullJavadoc(type:Jar) {
    dependsOn createFullJavaDoc
    from javadocTempPath
    archiveName "${aarBaseName}-javadoc.jar"
    destinationDir(file(binRoot))
}

task cleanAndRebuildBinFiles(type:Delete) {
    dependsOn packFullJavadoc
    delete aarTempPath
    delete javadocTempPath
}

build.finalizedBy(cleanAndRebuildBinFiles)
// ------------------------------------------------------------------


///////////////////////upload to bintray///////////////////////////////

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = "ai.olami"

def siteUrl = 'https://olami.ai'
def gitUrl = 'https://github.com/olami-developers/olami-android-client-sdk'
def trackerUrl = ''
def devName = 'olami'
def devEmail = 'olami.ai@viateach.com'
def bintrayRepoName = 'api-client'
def bintrayPackageName = 'olami-android-client-sdk'
def bintrayPackageDesc = 'API Android client library and sample codes'


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintrayUser")
    key = properties.getProperty("bintrayApiKey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepoName
        name = bintrayPackageName
        desc = bintrayPackageDesc
        websiteUrl = siteUrl
        issueTrackerUrl = trackerUrl
        vcsUrl = gitUrl
        licenses = ['Apache-2.0']
        labels = ['olami', 'speech', 'nlp', 'nlu', 'aar', 'android', 'example']
        publicDownloadNumbers = true
        publish = true
    }

    publications = ['MyPublication']
}

def pomConfig = {
    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
        }
    }
    developers {
        developer {
            id devName
            name devName
            email devEmail
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            artifact bundleRelease
            artifact sourcesJar
            artifact javadocJar

            groupId group
            artifactId archivesBaseName
            version version

            pom.withXml {
                asNode().appendNode('name', bintrayPackageName)
                asNode().appendNode('url', siteUrl)
                asNode().appendNode('description', bintrayPackageDesc)
                asNode().children().last() + pomConfig
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each {
                    if((it.name != null) && (!it.name.equals("unspecified"))) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompile.classpath
        }
    }
    source = android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

task findConventions << {
    println project.getConvention()
}
///////////////////////upload to bintray///////////////////////////////

